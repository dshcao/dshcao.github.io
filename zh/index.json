[
{
	"uri": "https://dshcao.github.io/zh/",
	"title": "",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/android/",
	"title": "android",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/android/",
	"title": "android",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/",
	"title": "文章",
	"tags": ["index"],
	"categories": [],
	"series": [],
	"description": "Post page",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E8%87%AA%E5%AE%9A%E4%B9%89view/",
	"title": "自定义view",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E8%87%AA%E5%AE%9A%E4%B9%89view/",
	"title": "自定义view",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/",
	"title": "自定义view",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E8%87%AA%E5%AE%9A%E4%B9%89view-imagecropview/",
	"title": "自定义view-ImageCropView",
	"tags": ["android", "自定义view"],
	"categories": [],
	"series": ["自定义view"],
	"description": "一个文件实现自定义头像裁剪控件",
	"content": "项目中需要为用户截取头像，刚开始调用系统自带功能，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  Intent intent = new Intent(\u0026#34;com.android.camera.action.CROP\u0026#34;); intent.setDataAndType(Uri.fromFile(new File(itemData.getPath())), \u0026#34;image/*\u0026#34;); intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION); // crop=true是设置在开启的Intent中设置显示的VIEW可裁剪 intent.putExtra(\u0026#34;crop\u0026#34;, \u0026#34;true\u0026#34;); // aspectX aspectY 是宽高的比例 intent.putExtra(\u0026#34;aspectX\u0026#34;, 1); intent.putExtra(\u0026#34;aspectY\u0026#34;, 1); // outputX outputY 是裁剪图片宽高 intent.putExtra(\u0026#34;outputX\u0026#34;, 350); intent.putExtra(\u0026#34;outputY\u0026#34;, 350); intent.putExtra(\u0026#34;scale\u0026#34;, true); intent.putExtra(\u0026#34;noFaceDetection\u0026#34;, false);//取消人脸识别功能 intent.putExtra(\u0026#34;outputFormat\u0026#34;, Bitmap.CompressFormat.PNG.toString()); //true则图片在intent中返回，如果图片过大，会导致oom，这里设置为false intent.putExtra(\u0026#34;return-data\u0026#34;, false); File avatar = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), AppConfig.Path.AVATAR); // FileProvider.getUriForFile(AvatarPickerActivity.this, getPackageName() + \u0026#34;.provider\u0026#34;, new File(itemData.getPath())); Uri outputUri = Uri.fromFile(avatar);//裁剪后输出位置 intent.putExtra(MediaStore.EXTRA_OUTPUT, outputUri); startActivityForResult(intent, REQUEST_CROP);   但使用过程中发现各手机ui不一致，更严重的是发现锤子手机有问题，锤子手机缩放图片后截取的图像仍是未缩放时的区域，然后就一顿搜索发现github上有不少这个项目，但效果不满意，且实现复杂，就这一个功能拆成N个文件。\n代码讲究 高内聚 低耦合 可重用\n最终目的方便维护\n首先分析如何实现：\n重写onDraw添加自己的逻辑代码，画一层蒙板，蒙板要覆盖整个imageview,周围是半透明，中间是方形或者圆形透明区域，可以用Path实现，还需要手势支持，所以还要用到GestureDetector ScaleGestureDetector，另外图片大小不一，第一次加载到imageview中肯定不是原尺寸，要经过缩放，那我们缩放到什么程度呢？因为我们截图不能使图像缩放小于中间透明区域，所以我们规定初次加载图像最短边缩放到中间透明区域，这里图片说明，这里还用到Matrix从来缩放图像,不太了解的可先看下文档谷歌一下\n首先为了使用方便自定义属性：\n1 2 3 4 5 6 7 8 9 10  \u0026lt;declare-styleable name=\u0026#34;ImageCropView\u0026#34;\u0026gt; \u0026lt;attr name=\u0026#34;aspectX\u0026#34; format=\u0026#34;integer\u0026#34; /\u0026gt; \u0026lt;attr name=\u0026#34;aspectY\u0026#34; format=\u0026#34;integer\u0026#34; /\u0026gt; \u0026lt;attr name=\u0026#34;viewStrokeColor\u0026#34; format=\u0026#34;color|reference\u0026#34; /\u0026gt; \u0026lt;attr name=\u0026#34;viewStrokeWidth\u0026#34; format=\u0026#34;dimension\u0026#34; /\u0026gt; \u0026lt;attr name=\u0026#34;viewShape\u0026#34; format=\u0026#34;enum\u0026#34;\u0026gt; \u0026lt;enum name=\u0026#34;square\u0026#34; value=\u0026#34;1\u0026#34; /\u0026gt; \u0026lt;enum name=\u0026#34;circle\u0026#34; value=\u0026#34;2\u0026#34; /\u0026gt; \u0026lt;/attr\u0026gt; \u0026lt;/declare-styleable\u0026gt;   自定义注解取代枚举\nViewShape\n1 2 3 4 5 6 7 8  @Retention(AnnotationRetention.SOURCE) @IntDef(SQUARE, CIRCLE) annotation class ViewShape(val value: Int = CIRCLE) { companion object { const val SQUARE = 1 const val CIRCLE = 1 shl 1 } }   ImageCropView\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117  class ImageCropView @JvmOverloads constructor( context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0 ) : AppCompatImageView(context, attrs, defStyleAttr), ViewTreeObserver.OnGlobalLayoutListener, ScaleGestureDetector.OnScaleGestureListener { @ViewShape var viewShape = ViewShape.CIRCLE//透明区域形状  private var viewStrokeWidth: Float = 1f//透明区域Stroke宽度  private var viewStrokeColor: Int = Color.WHITE//透明区域Stroke颜色  private var viewMaskColor: Int = Color.parseColor(\u0026#34;#77000000\u0026#34;)//半透明区域颜色  var aspectX: Int = 1//宽高比  var aspectY: Int = 1//宽高比  private val touchSlop: Int var overViewOffset = RectF() private var overViewSpace: Int = 0//透明区域与控件边缘的space  private var imageSpace: Int = 0//  private val paint: Paint//半透明区域  private val paintS: Paint//stroke  private var gestureDetector: GestureDetector private var scaleGestureDetector: ScaleGestureDetector var mValues = FloatArray(9) var mMatrix = Matrix() var initScale: Float = 0f var minScale: Float = 0f var maxScale: Float = 0f var max = 6 var overViewPath = Path() var overView = RectF() init { if (attrs != null) { val a = context.obtainStyledAttributes(attrs, R.styleable.ImageCropView) viewStrokeWidth = a.getDimension(R.styleable.ImageCropView_viewStrokeWidth, viewStrokeWidth) viewStrokeColor = a.getColor(R.styleable.ImageCropView_viewStrokeColor, viewStrokeColor) viewMaskColor = a.getColor(R.styleable.ImageCropView_viewStrokeColor, viewMaskColor) aspectX = a.getInt(R.styleable.ImageCropView_aspectX, aspectX) aspectY = a.getInt(R.styleable.ImageCropView_aspectY, aspectY) viewShape = if (aspectX != aspectY) ViewShape.SQUARE else viewShape a.recycle() } touchSlop = ViewConfiguration.get(context).scaledTouchSlop setLayerType(View.LAYER_TYPE_SOFTWARE, null) scaleType = ScaleType.MATRIX paint = Paint(Paint.ANTI_ALIAS_FLAG) paint.color = viewMaskColor paintS = Paint(Paint.ANTI_ALIAS_FLAG) paintS.color = viewStrokeColor paintS.style = Paint.Style.STROKE paintS.strokeWidth = viewStrokeWidth if (overViewSpace == 0) overViewSpace = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 42f, resources.displayMetrics) .toInt() imageSpace = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 1f, resources.displayMetrics) .toInt() val gestureListener: SimpleOnGestureListener = object :SimpleOnGestureListener() { override fun onDoubleTap(e: MotionEvent): Boolean { //双击时若当前缩放小于最大缩放的一半时就缩放到最大，反之回到到初始加载的缩放  val currScale: Float = getCurrentScale() val midScale: Float = maxScale / (max / 2f) if (currScale \u0026lt; midScale) { val rScale = midScale / currScale scale(rScale, rScale, e.x, e.y) } else { val rScale: Float = initScale / currScale scale(rScale, rScale, e.x, e.y) } return true } override fun onScroll( e1: MotionEvent, e2: MotionEvent, distanceX: Float, distanceY: Float ): Boolean { val dx: Float val dy: Float val matrixRectF: RectF = getMatrixRectF() //滑动时判断滑动的距离是否超出中间透明区域，取两者最小值，即最多只能滑动到透明区域边缘  if (distanceX \u0026lt; 0) { dx = distanceX.coerceAtLeast(matrixRectF.left - overViewOffset.left) } else { dx = distanceX.coerceAtMost(matrixRectF.right - overViewOffset.right) } if (distanceY \u0026lt; 0) { dy = distanceY.coerceAtLeast(matrixRectF.top - overViewOffset.top) } else { dy = distanceY.coerceAtMost(matrixRectF.bottom - overViewOffset.bottom) } translate(-dx, -dy) return true } } gestureDetector = GestureDetector(context, gestureListener) scaleGestureDetector = ScaleGestureDetector(context, this) } ....暂时省略 }   onGlobalLayout中确定初始值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  override fun onAttachedToWindow() { super.onAttachedToWindow() viewTreeObserver.addOnGlobalLayoutListener(this) } //onGlobalLayout作用是获取构造函数中获取不到的尺寸以便确定初始缩放大小 //最大最小缩放根据初始缩放决定 override fun onGlobalLayout() { val drawable = drawable ?: return val scale: Float val viewWidth = width val viewHeight = height val overViewSize: Int = Math.min(viewWidth, viewHeight) - overViewSpace * 2 val drawableWidth = drawable.intrinsicWidth val drawableHeight = drawable.intrinsicHeight //build overview path  overViewPath.addRect( 0f, 0f, viewWidth.toFloat(), viewHeight.toFloat(), Path.Direction.CCW ) val circlePath = Path() val radius = overViewSize / 2.toFloat() if (viewShape == ViewShape.CIRCLE) { circlePath.addCircle( viewWidth / 2.toFloat(), viewHeight / 2.toFloat(), radius, Path.Direction.CCW ) } else { circlePath.addRect( viewWidth / 2f - radius, viewHeight / 2f - radius, viewWidth / 2f + radius, viewHeight / 2f + radius, Path.Direction.CCW ) } overViewPath.op(circlePath, Path.Op.XOR) overView.set( viewWidth / 2f - radius, viewHeight / 2f - radius, viewWidth / 2f + radius, viewHeight / 2f + radius ) overViewOffset.set(overView) overViewOffset.inset(-imageSpace.toFloat(), -imageSpace.toFloat()) //calculate the scale  scale = (overViewSize + imageSpace * 2) * 1f / Math.min( drawableWidth, drawableHeight ) initScale = scale minScale = initScale maxScale = minScale * max //calculate the delta move to center  val dx = viewWidth / 2 - drawableWidth / 2 val dy = viewHeight / 2 - drawableHeight / 2 mMatrix.postTranslate(dx.toFloat(), dy.toFloat()) mMatrix.postScale(initScale, initScale, viewWidth / 2.toFloat(), viewHeight / 2.toFloat()) imageMatrix = mMatrix //初始测量一次就够了  viewTreeObserver.removeOnGlobalLayoutListener(this) }   onDraw\n1 2 3 4 5 6 7 8 9 10 11 12  override fun onDraw(canvas: Canvas?) { super.onDraw(canvas) //画蒙层  canvas!!.drawPath(overViewPath, paint) //画stroke  if (viewStrokeWidth \u0026gt; 0) { canvas.drawCircle( overView.centerX(), overView.centerY() , (overView.width() + viewStrokeWidth) / 2, paintS ) } }   缩放处理逻辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  override fun onScale(detector: ScaleGestureDetector?): Boolean { val currScale = getCurrentScale() var scaleFactor = detector!!.scaleFactor //主要是判断不能小于最小缩放值，不能大于最大缩放值  scaleFactor = if (scaleFactor \u0026lt; 1 \u0026amp;\u0026amp; currScale \u0026gt; minScale) { Math.max(scaleFactor, minScale / currScale) } else if (scaleFactor \u0026gt; 1 \u0026amp;\u0026amp; currScale \u0026lt; maxScale) { Math.min(scaleFactor, maxScale / currScale) } else { 1f } if (scaleFactor != 1f) { scale(scaleFactor, scaleFactor, detector.focusX, detector.focusY) } return true }   裁剪图片,这里可以替换其他方式，提高效率,这里使用中够用，暂时这样处理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  fun crop(file: File, outputX: Int, outputY: Int): Boolean { val bitmap = cropImage(outputX, outputY) ?: return false try { if (!file.exists()) { if (!file.parentFile.mkdirs() || !file.createNewFile()) { return false } } val fos = FileOutputStream(file) //java 中可以直接bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos)  //kotlin中报错，必须work线程中处理  val thread = Thread(Runnable { bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos) }) thread.join() fos.flush() fos.close() bitmap.recycle() return true } catch (e: Exception) { e.printStackTrace() } return false } fun cropImage(outputX: Int, outputY: Int): Bitmap? { val drawable = (drawable ?: return null) as? BitmapDrawable ?: return null val scale = getCurrentScale() val mRectF = getMatrixRectF() val w: Float = overView.width() / scale val h: Float = overView.height() / scale val left: Float = (overView.left - mRectF.left) / scale val top: Float = (overView.top - mRectF.top) / scale val srcBmp = drawable.bitmap val cropBmp = Bitmap.createBitmap( srcBmp, left.toInt(), top.toInt(), w.toInt(), h.toInt() ) val bmp = Bitmap.createScaledBitmap(cropBmp, outputX, outputY, false) cropBmp.recycle() return bmp }   最开始写这个控件的时候是java，写文章的时候重写改成kotlin，继承OnScaleGestureListener ,onScaleEnd这里原不需要逻辑，结果kotlin自动生成TODO(\u0026quot;not implemented\u0026quot;) ，这个标志必须删除，不然缩放的时候会崩溃。。。\noverride fun onScaleEnd(detector: ScaleGestureDetector?) {\nTODO(\u0026ldquo;not implemented\u0026rdquo;) //To change body of created functions use File | Settings | File Templates.\n}\n 源码\n "
},
{
	"uri": "https://dshcao.github.io/zh/posts/renderscript%E4%BD%BF%E7%94%A8/",
	"title": "Android RenderScript使用",
	"tags": ["android"],
	"categories": [],
	"series": ["renderscript"],
	"description": "Android RenderScript详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-handler%E8%A7%A3%E6%9E%90/",
	"title": "Android源码解析-Handler",
	"tags": ["android", "handler"],
	"categories": [],
	"series": ["源码解析"],
	"description": "android Handler机制详解.",
	"content": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote with attribution  Note Don't communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Code Blocks Code block with backticks public void getX(int a){ Return a++; } 1 2 3  public void getX(int a){ Return a++; }   Ordered List  Message MessageQueue Loop  Press CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike's talk during Gopherfest, November 18, 2015. | \u0026#x21a9;\u0026#xfe0e;\n  "
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-nestedscrolling%E8%A7%A3%E6%9E%90/",
	"title": "Android源码解析-NestedScrolling",
	"tags": ["android", "触摸滑动"],
	"categories": [],
	"series": ["源码解析"],
	"description": "android 嵌套发动NestedScrollingXXX.",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-scroller%E8%A7%A3%E6%9E%90/",
	"title": "Android源码解析-Scroller",
	"tags": ["android", "触摸滑动"],
	"categories": [],
	"series": ["源码解析"],
	"description": "android Scroller滑动详解.",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/handler/",
	"title": "handler",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/http/",
	"title": "http",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/http/",
	"title": "http",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/httphttps/",
	"title": "Http/Https详解",
	"tags": ["http", "https"],
	"categories": [],
	"series": ["编程基础"],
	"description": "Http/Https详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/https/",
	"title": "https",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/jetpack/",
	"title": "jetpack",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/jetpack/",
	"title": "jetpack",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/jetpack-jobservice/",
	"title": "Jetpack-JobService详解",
	"tags": ["android", "jetpack"],
	"categories": [],
	"series": ["jetpack"],
	"description": "Jetpack组件JobService详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/jetpack-lifecycles/",
	"title": "Jetpack-Lifecycles",
	"tags": ["android", "jetpack"],
	"categories": [],
	"series": ["jetpack"],
	"description": "Jetpack组件Lifecycles详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/jetpack-navigation/",
	"title": "Jetpack-Navigation详解",
	"tags": ["android", "jetpack"],
	"categories": [],
	"series": ["jetpack"],
	"description": "Jetpack组件Navigation详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/jetpack-workmanager/",
	"title": "Jetpack-WorkManager详解",
	"tags": ["android", "jetpack"],
	"categories": [],
	"series": ["jetpack"],
	"description": "Jetpack组件WorkManager详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/kotlin/",
	"title": "kotlin",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/kotlin/",
	"title": "kotlin",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/kotlin/",
	"title": "kotlin",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/renderscript/",
	"title": "renderscript",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/kotlin-%E8%AF%AD%E6%B3%95/",
	"title": "写在开始",
	"tags": ["kotlin", "android"],
	"categories": [],
	"series": ["kotlin"],
	"description": "写在开始写博客的开始",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B/",
	"title": "写在开始",
	"tags": ["生活"],
	"categories": [],
	"series": ["生活"],
	"description": "写在开始写博客的开始",
	"content": "工作已经很多年，但基本没写过博客。为什么？！！！当然是懒了！！！\n难道工作这么多年就没有想记录或者没有想写的内容吗？当然有！平时把记录的内容都放在了txt文件中。CSDN？当然早就注册了，但总觉得CSDN网站有些潦草。后来，至少是四年前在博客园申请过开博客，当时申请的理由大概是记录生活和学习内容，转载和保存别人的精品文章，结果，emmm\u0026hellip;很明显，被拒绝了，加上懒散，然后很久没有在写文章上花心思了。一晃不知道多久过去了，无意发现简书，支持当时很流行很火的markdown，自己也很想尝试，然后申请了一个账号，才发现写文章真的不是一件很轻松的事\u0026hellip;至少对于我这种先天性缺陷不会组织语言又追求完美的人。然而工作中又有很多东西需要记录，怎么办?于是我把简书当作了草稿箱，只有自己看的明白的杂乱排版，一篇一篇下来也不少了。\n最近准备找工作，写博客当然是加分项，加上自己这个年纪，很多小年轻在上学的时候就开始写了，当然有些唏嘘和忐忑！所以准备再次起航！\n为什么又搭建这个博客而不是继续简书，主要是我觉得简书软文和鸡汤太多，已不如当初，技术氛围已经快丧失完了。就像人：若只如初见！\n当然还有其他技术氛围不错的掘金等，但搭建自己的博客和网站一直是我想做的事，那就干脆就自己搭建一个吧。服务器我已经买，环境也已搭建好，想自己一个一个页面写出来，写了一部分页面，效果并不满意，觉得写页面这事对我还是有点吃力，况且域名还没有备案。于是选择了先在github搭建，比想象简单，两小时通关。\n选择hugo主要是因为是golang写的，虽然搭建又不用写golang ^_-。本人是golang爱好者，在我看来，golang最接近我对编程语言的幻想。\n开始就不会晚！好吧，我承认自己都感觉这话有点虚了，但开始总比没开始好。\n"
},
{
	"uri": "https://dshcao.github.io/zh/series/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
	"title": "源码解析",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E7%94%9F%E6%B4%BB/",
	"title": "生活",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E7%94%9F%E6%B4%BB/",
	"title": "生活",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E7%94%9F%E6%B4%BB/",
	"title": "生活",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/",
	"title": "编程基础",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E8%A7%A6%E6%91%B8%E6%BB%91%E5%8A%A8/",
	"title": "触摸滑动",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/pt/dir/fourth/",
	"title": "Fourth",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My fourth presentation",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/pt/",
	"title": "展厅",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Presentation list with reveal.js",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/pt/third/",
	"title": "Third",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My third presentation",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/pt/second/",
	"title": "Second",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My second presentation",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/pt/first/",
	"title": "First",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "My first presentation",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/archive/",
	"title": "存档",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Archive Page",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/kotlin-%E5%8D%8F%E7%A8%8B/",
	"title": "",
	"tags": ["kotlin", "协程"],
	"categories": [],
	"series": [],
	"description": "Kotlin协程",
	"content": "协程中又一个概念CPS(Continuation Passing Style)\n协程是用户态的行为类似线程的库\n用户态：不想线程在用户态和内核态切换\n类似线程：只是行为类似\n库：是的，协程本质上是一个用线程次调度代码块的库\n可能你会问 没看到线程调度啊 这事编译器字节码操作\n解决线程问题由最开始的代码层面的锁如java中的lock,到一些以node.js为代表的单线程异步回调，异步回调的方式引起Callback hell,再到协程，协程使用状态机处理不同的挂起点，避免了Callback hell\n 线程 actor 协程 协程可以理解为一段代码片段，Kotlin中的协程是利用编译器操作字节码实现的，本质上在利用线程池来切换协程代码片段,协程遇到阻塞会yiel让出cpu并保存上下文,resume恢复的时候恢复上下文  java中的lock避免了锁消耗\nactor和协程的优势是没有锁消耗且切换不想线程那样需要在用户态和内核态切换\n先阶段行业里的比较流行的解决方案之一就是单线程加上异步回调。其代表派是node.js以及Java里的新秀Vert.x。他们的核心思想是一样的，遇到需要进行I/O操作的地方，就直接让出CPU资源，然后注册一个回调函数，其他逻辑则继续往下走，I/O结束后带着结果向事件队列里插入执行结果，然后由事件调度器调度回调函数，传入结果。这时候执行的地方可能就不是你原来的代码区块了，具体表现在代码层面上，你会发现你的局部变量全部丢失，毕竟相关的栈已经被覆盖了，所以为了保存之前的栈上数据，你要么选择带着一起放入回调函数里，要么就不停的嵌套，从而引起反人类的Callback hell。\n因此相关的Promise，CompletableFuture等技术都是为解决相关的问题而产生的。但是本质上还是不能解决业务逻辑的割裂\n相比于callback接口回调的异步框架，Coroutine这个暂停和恢复在没有JVM支持下，比较难以理解，是怎么做到的？有没有什么魔法？其实JVM中Coroutine的实现方式有很多(implementing-coroutines-in-java)，Quasar Fiber则是通过字节码修改技术在编译或载入时织入必要的上下文保存/恢复代码，通过抛异常来暂停，恢复的时候根据保存的上下文(Continuation),恢复jvm的方法调用栈和局部变量,Quasar Fiber提供相应的Java类库来实现,对应用有一定的侵入性(很小)\nQuasar Fiber 主要有 Instrument + Continuation + Scheduler几个部分组成\nInstrument 做一些代码的植入，如park前后上下文的保存/恢复等\nContinuation 保存方法调用的信息，如局部变量，引用等,用户态的stack,这个也是跟akka等基于固定callback接口的异步框架最大的区别\nScheduler 调度器，负责将fiber分配到具体的os thread执行\n参考：\n 次时代Java编程（一）：Java里的协程 Coroutine in Java - Quasar Fiber实现 深入理解JVM - Java内存模型与线程 - 第十二章 Java线程中wait状态和block状态的区别? 用户态和内核态的理解和区别 Java中的锁分类 协程  "
},
{
	"uri": "https://dshcao.github.io/zh/posts/app%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/",
	"title": "Android-App启动流程",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Syntax highlighting test",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\n This is a blockqute.\n line\nline\nHandler详解 Verify the following code blocks render as code blocks and highlight properly.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   "
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-apt/",
	"title": "Android-APT",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-lottie/",
	"title": "Android-lottie",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/activityfragment%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
	"title": "Android四大组件-Activity/Fragment",
	"tags": ["四大组件", "android"],
	"categories": [],
	"series": ["四大组件"],
	"description": "Android四大组件-Activity/Fragment使用",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\n This is a blockqute.\n line\nline\nCode Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   "
},
{
	"uri": "https://dshcao.github.io/zh/posts/pictureinpicture/",
	"title": "Android画中画-PictureInPicture",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Android画中画-PictureInPicture详解",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/anr/",
	"title": "anr",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/anr%E5%88%86%E6%9E%90/",
	"title": "ANR分析",
	"tags": ["anr"],
	"categories": [],
	"series": [],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/java/",
	"title": "java",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/java/",
	"title": "java",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/rxjava/",
	"title": "rxjava",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/rxjava/",
	"title": "rxjava",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/rxjava2%E6%BA%90%E7%A0%81%E5%8F%8A%E4%BD%BF%E7%94%A8/",
	"title": "RxJava2源码及使用",
	"tags": ["java", "rxjava", "android"],
	"categories": [],
	"series": ["源码解析", "rxjava"],
	"description": "RxJava2源码及使用",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E5%8D%8F%E7%A8%8B/",
	"title": "协程",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E5%8D%8F%E7%A8%8B/",
	"title": "协程",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/",
	"title": "四大组件",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/",
	"title": "四大组件",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
	"title": "多线程",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/",
	"title": "多线程详解",
	"tags": ["多线程"],
	"categories": [],
	"series": [],
	"description": "Syntax highlighting test",
	"content": "前置知识 线程状态：\n 初始态（NEW） 运行态（RUNNABLE）  就绪态（READY） 运行态（RUNNNIN）   阻塞态（BLOCKED） 等待态（WAITING） 超时等待态（TIMED_WAITING） 终止态（TERMINATED）  cpu指令分为特权指令和非特权指令  特权指令 对内存空间的访问范围不受限制，即：既可以访问用户存储空间也可以访问系统存储空间，一般只给操作系统使用，特权指令：时钟操作 I/O操作 内存清零 关机等 非特权指令 一般程序使用，只能访问用户存储空间完成一般性的操作和任务  用户态和内核态  用户态 只能运行非特权指令 内核态 可运行特权指令  用户态切换到内核态的三种方式：  系统调用,在CPU中的实现称之为陷阱指令(Trap Instruction) 如：文件操作和网络数据发送 未预知的异常(注意不等同于java中的异常),如：缺页异常 外围设备中断  Intel x86cpu 有Ring0~Ring3四个级别，Linux将Ring0作为内核态，Ring3作为用户态。Linux进程有4G地址空间 1~3G用户态地址空间 3~4G是内核态地址空间\njava线程和操作系统线程是一一对应的关系，每一个java/c++线程都映射到操作系统上的一个线程.Java中对线程的操作，如：创建/阻塞/切换等都要切换到内核态，这种切换消耗大量系统资源，因为用户态与内核态都有各自专用的内存空间，专用的寄存器等，用户态切换至内核态需要传递给许多变量、参数给内核，内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。Java中synchronized会导致未获得锁的线程进入阻塞状态，引起用户态与内核态的切换\n多线程的意义 首先明确一个cpu核心同时只能执行一个系统线程，这也是为什么一般线程池是和cpu核心关联,通常维护线程alive数量最小设置为CPU_COUNT+1，最大设置为CPU_COUNT*2+1\n多线程的出现是解决并发和性能问题，那么是不是多线程比但线程性能更好呢？那么要看你对性能的理解，对于整个计算机来说并不一定，这要分情况。影响线程性能的主要是线程的状态切换和线程间切换以及为了线程安全引入的线程锁带来的性能消耗\n 单核cpu   计算密集型操作 本身大量占用cpu，多线程的创建和上下文切换反而加重了cpu的负担，影响这个计算机的性能，但程序本身有更多机会竞争cpu时间片 I/O密集型操作 由于操作过程较少占用cpu，多线程有助于提高性能。我们平时大多是这种操作  多核cpu 由于是多核可以同时执行多个线程，此时多线程是有助于极高整个计算机的利用率，提升性能  每个线程维护一个自己的栈\njava内存模型直接保证的原子性包括：read load use assign store write这6个，另外synchronized之间的操作也具备原子性\nLockSupport.park()\nJava线程的API  thread.start()当前线程进入RUNNABLE Thread.yield()不释放锁,当前运行态线程让出cpu时间片给同等优先级的线程执行并进入就绪态 thread.interrupt() 设置thread中断标志位为true,Java中的输入输出流并没有类似于Interrupt的机制，但是Java的InterruptableChanel接口提供了这样的机制，任何实现了InterruptableChanel接口的类的IO阻塞都是可中断的，中断时抛出ClosedByInterruptedException，也是由Thread对象调用Interrupt方法完成中断调用。IO中断后将关闭通道。实现InterruptableChanel接口的类包括FileChannel,ServerSocketChannel, SocketChannel, Pipe.SinkChannel andPipe.SourceChannel，也就是说，原则上可以实现文件、Socket、管道的可中断IO阻塞操作。虽然解除IO阻塞的方法还可以直接调用IO对象的Close方法，这也会抛出IO异常。但是InterruptableChanel机制能够使处于IO阻塞的线程能够有一个和处于中断等待的线程一致的线程停止方案 thread.isInterrupted() 返回thread中断标志位状态 Thread.interrupted() 返回当前thread中断标志位状态并清除中断标志位,另外抛出中断异常被捕获时也会清除中断标志位，如： 1 2 3 4 5 6  try{ Thread.sleep(2000); }catch(InterruptedException e){ e.printStackTrace(); //进入中断异常的catch代码块时会清除中断标志位 }    wait() 释放锁,以便其他等待此锁的线程执行，当前线程进入等待态，必须在synchronized同步代码块中调用 wait(1000) 释放锁,以便其他等待此锁的线程执行，当前线程进入超时等待态，必须在synchronized同步代码块中调 notify()/notifyAll() 当前线程进入RUNNABLE，此时调用当前monitor.wait()的线程重新竞争锁。必须在synchronized同步代码块中调\nnotify是依附于锁(监视器)monitor的，故必须是monitor.wait()/monitor.notifyAll()，如： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  private final Object obj = new Object(); private String name = null; public void xxx() { synchronized (obj) { while (name == null) { try { obj.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } } } public void yyy() { synchronized (obj) { name = \u0026#34;name\u0026#34;; obj.notify(); } }    thread.join() 当前线程进入等待态,注意不是thread，但thread必须是alive状态否则join无效，join是通过wait实现的 thread.join(1000) 当前线程进入超时等待态，其他同join() thread.isAlive() 当前显示是否alive,A thread is alive if it has been started and has not yet died thread.setDaemon(true) 设置线程为守护线程，必须在调用线程的start()方法之前设置，否则会跑出IllegalThreadStateException异常，Java线程分为两种：用户线程和守护线程。当一个程序中所有用户进程结束，程序也就终止了，守护线程也会随即终止，且不保证守护线程执行完毕,即守护线程拥有自动结束自己生命周期的特性，而非守护线程不具备这个特点，这也是利用守护线程的原因。守护线程是用来在后台做通用服务的，如垃圾回收线程即时一个守护线程。不要在守护线程中执行业务逻辑操作(比如对数据的读写等).\njava还有一类特殊线程：Hook (钩子) 线程\nRuntime.getRuntime().addShutdownHook(hook);\n在程序即将退出的时候，也就是 JVM 程序即将退出的时候，Hook 线程就会被启动执行,Hook (钩子) 线程的应用场景：  防止程序重复执行，具体实现可以在程序启动时，校验是否已经生成 lock 文件，如果已经生成，则退出程序，如果未生成，则生成 lock 文件，程序正常执行，最后再注入 Hook 线程，这样在 JVM 退出的时候，线程中再将 lock 文件删除掉 Hook 线程中也可以执行一些资源释放的操作，比如关闭数据库连接，Socket 连接等   Thread.sleep(1000) 不释放锁，当前线程进入超时等待态,Thread.sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”  thread.interrupt()和Thread.interrupted()会唤醒Thread.sleep和thread.wait()导致Thread.sleep和thread.wait()抛出中断异常\nthread.stop, thread.suspend and thread.resume为什么被deprecated，详见参考Java Thread Primitive Deprecation\nthread.stop deprecated原因总的说就是太暴力，会引发不可预期问题。因为thread.stop会抛出ThreadDeath异常，而The monitors are unlocked as the ThreadDeath exception propagates up the stack。一般通过代码控制，或者可以通过thread.interrupt()设置锚点配合代码控制\nthread.suspend and thread.resume deprecated原因是容易引起死锁，可以用obj.wait()/obj.notifyAll()替代\n锁分类  公平锁/非公平锁 公平锁非公平锁的区别是是否是按照申请锁的顺序获取锁。其中非公平锁可能会造成优先级反转和饥饿现象。非公平锁的优点是吞吐量比公平锁大，因为维持公平有一定消耗  优先级反转  T0 thread3(低优先级)获得锁SYNC1 T1 thread2(中优先级)与thread3竞争抢占了cpu时间片，thread3仍持有锁 T2 thread1(高优先级)与thread2竞争抢占了cpu时间片 T3 thread1需要获取锁，但锁被thread3持有，thread1挂起 T4 thread2和thread3都处于可运行态，但由于thread2的优先级高于thread3，thread2优先抢占cpu时间片 总结：这导致了一个现象：低优先级thread2比高优先级thread1先执行 解决：优先继承，即高优先级线程需要低优先级线程持有的锁时，临时提升低优先级线程的优先级，如上面将thread3优先级临时提升到thread1的优先级别，当锁被释放的时候thread3恢复到原来的优先级,这一过程一般有操作系统完成   饥饿 高优先级线程不断进入导致低优先级线程一直无法得到执行   独享锁/共享锁 独享锁：只能被一个线程同时持有，共享锁：可被多个线程同时持有 互斥锁/读写锁 自旋锁 在Java中，自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU 可重入锁 又名递归锁，是指已持有该锁再次调用需要该锁的其他代码块自动获取锁。可重入锁有效避险死锁现象 分段锁 分段锁其实是一种锁的设计，并不是具体的一种锁,目的是细化锁的粒度 java中ConcurrentHashMap就是分段锁，当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入，但在统计size的时候，需要获取hashmap全局信息的时候，就需要获取所有的分段锁才能统计 向锁/轻量级锁/重量级锁 这三种锁是指锁的状态，并且是针对Synchronized。在Java 5通过引入锁升级的机制来实现高效Synchronized。这三种锁的状态是通过对象监视器在对象头中的字段来表明的。\n偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。\n轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，\n重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低 乐观锁/悲观锁 乐观锁与悲观锁不是指具体的什么类型的锁，而是指看待并发同步的角度。\n悲观锁认为对于同一个数据的并发操作，一定是会发生修改的，哪怕没有修改，也会认为修改。因此对于同一个数据的并发操作，悲观锁采取加锁的形式。悲观的认为，不加锁的并发操作一定会出问题。\n乐观锁则认为对于同一个数据的并发操作，是不会发生修改的。在更新数据的时候，会采用尝试更新，不断重新的方式更新数据。乐观的认为，不加锁的并发操作是没有事情的。从上面的描述我们可以看出，悲观锁适合写操作非常多的场景，乐观锁适合读操作非常多的场景，不加锁会带来大量的性能提升。\n悲观锁在Java中的使用，就是利用各种锁。\n乐观锁在Java中的使用，是无锁编程，常常采用的是CAS算法，典型的例子就是原子类，通过CAS自旋实现原子操作的更新  Java中的锁实现  Synchronized 公平锁 独享锁 可重入锁 synchronized不包含在方法签名，不能继承 Lock Java1.5 通过AQS的来实现线程调度，是代码层面实现的锁，比Synchronized轻量，lock的代码块程序抛出异常也不会释放锁，需要手动释放，故使用Lock必须在try{}catch{}块中进行，并且将释放锁的操s作放在finally代码块\nlock() 获取锁，未获取则等待\ntryLock() 获取锁，未获取则等待，有返回值，表示获取锁是否成功\ntryLock(long time, TimeUnit unit)获取锁，未获取则等待，有返回值表示设定时间内获取锁是否成功\nockInterruptibly() 如果线程正在等待获取锁，则这个线程能够响应中断，通过thread.interrupt()中断线程的等待状态\n注：thread.interrupt()只能中断阻塞的线程，故线程获取锁之后不能响应interrupt()中断  ReentrantLock 可重入锁，独享锁，默认非公平锁，可以通过构造函数指定是否是公平， ReadWriteLock 读写锁 读锁是共享锁，写锁是独享锁，即可以共读读，不能共写读，读写，写写  ReentrantReadWriteLock 可重入读写锁，继承ReadWriteLock，并支持ReentrantLock可重入锁的特性      参考：\n 深入理解java内存模型系列文章 synchronized原理和锁优化 Java 多线程之 Hook (钩子) 线程 Java Thread Primitive Deprecation Java线程中wait状态和block状态的区别? 用户态和内核态的理解和区别 Java中的锁分类 Java 并发性和多线程  "
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%A1%A5%E5%85%85/",
	"title": "多线程详解补充",
	"tags": ["多线程"],
	"categories": [],
	"series": [],
	"description": "对多线程详解中提到的部分概念的补充",
	"content": "Java内存模型 Java内存模型主要目标：定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variable）与Java编程中的变量略有区别，它包括实例变量/静态字段和构成数组对象的元素，不包括局部变量和方法参数（线程私有）。为获得较好的执行效能，Java内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交换，也没有限制即时编译器调整代码执行顺序这类权利。\nJava内存模型规定所有变量都存储在主存（Main Memory）中（虚拟机内存的一部分）。每条线程还有自己的工作内存（Working Memory），线程的工作内存保存了被线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取/赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主存来完成。\n这里的主内存/工作内存与Java内存区域中的Java栈/堆/方法区并不是同一个层次的内存划分。如果两者一定要勉强对应起来，那从变量/主内存/工作内存的定义来看，主内存主要对应于Java堆中对象的实例数据部分，而工作内存则对应于虚拟机栈中的部分区域。从更低的层次来说，主存就是硬件的内存，而为获取更好的运算速度，虚拟机及硬件系统可能会让工作内存优先存储于寄存器和高速缓存。\n主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、从工作内存同步回主内存之类的实现细节，Java内存模型中定义了以下8种操作来完成:lock unlock read load use assign store write\n对long和double型变量的特殊规则 允许虚拟机将没有被volatile修饰的64位数据类型（long和double）的读取操作划分为两次32位的操作来进行，即允许虚拟机实现选择可以不保证64位数据类型的load、store、read和write这4个操作的原子性，就点就是long和double的非原子协定（Nonatomic Treatment of double and long Variables）。\n如果多个线程共享一个为声明为volatile的long或double类型变量，并同时对他们进行读取和修改操作，那么有些线程可能会读取到一个即非原值，也不是其他线程修改值得代表了“半个变量”的数值。\n不过这种读取带“半个变量”的情况非常罕见（在目前商用虚拟机中不会出现），因为Java内存模型虽然允许虚拟机不把long和double变量的读写实现成原子操作，但允许虚拟机选择把这些操作实现为具有原子性的操作，而且还“强烈建议”虚拟机这样实现。\n原子性、可见性和有序性  原子性（Atomicity）：由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问具备原子性（long和double例外）。如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了lock和unlock操作来满足需求，尽管虚拟机未把lock和unlock操作直接开放给用户，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐式地使用这两个操作，这两个字节码指令反应到Java代码中就是同步块——synchronized关键字，因此在synchronized块之间的操作也具备原子性。 可见性（Visibility）：指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。 有序性（Ordering）：Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另外一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”（Within-Thread As-if-Serial Semantics），后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一时刻只允许一条线程对其进行lock操作”这条规则获得的，这个规则决定了持有同一个锁的两个同步块只能串行地进入  多线程安全 多线程安全问题根本原因是内存copy和时间片分配导致的，要做到线程安全就是要做到“局部串行”或者原子性，比如两个线程同时访问一个临界资源（一个对象，对象中的属性，一个文件，一个数据库等）可能引发线程安全问题，这时就要做到两个线程访问临界资源这一局部顺序是串行执行\n高优先级线程并不一定比低优先级线程先抢占cpu资源，高级优先抢占资源的权重大，但有随机性\nvolatile/Semaphore/AtomicXXX 两者本质上不是同一类东西\n volatile Java关键字 声明某个变量值的一致性(内存同步)，但不保证原子操作，对赋值操作可以保证原子性。如：a=10，不能保证a++操作的原子性，因为a++其实是a=a+1的语法糖，a=a+1在内存中其实是分两步的：temp=a+1 a=temp。对于复杂对象的赋值操作原子性，如：User user=user1;User user=new User;,但不能保证对user.name属性操作的原子性.即可以看作只能赋值操作原子性。volatile 声明某个变量值的一致性(内存同步)，但不保证原子操作 Semaphore 控制同时访问某个特定资源或者某个操作的操作数量 AtomicXXX Java库实现 可以保证a++操作的原子性  CountDownLatch与join 比如有三个线程 thread1,thread2,thread3\n当thread3需要thread1,thread2都执行完毕后执行，则两者皆可实现，但当thread3只需要thread1,thread2其中一个执行完毕就可执行的场景CountDownLatch很容易实现，使用join则并不容易实现\n详见参考：CountDownLatch理解一：与join的区别\nRunable Future Callable   Runable 1.没有返回值 2.无法抛异常\n1 2 3  public interface Runnable { public abstract void run(); }     Callable 1.有返回结果，可以抛异常，但不像Runnable那样通过Thread的start方法就能启动实现类的run方法，通常利用ExecutorService的submit方法去启动call方法自执行任务，而ExecutorService的submit又返回一个Future类型的结果，因此Callable通常也与Future一起使用\n1 2 3  public interface Callable\u0026lt;V\u0026gt; { V call() throws Exception; }     Future 保存异步计算的结果,可以在我们执行任务时去做其他工作,Future有一下方法\n1. boolean cancel(boolean mayInterruptIfRunning);用来取消任务，成功返回true，失败则返回false\n2.boolean isCancelled();任务是否已经取消\n3.boolean isDone();任务是否已经完成\n4.V get() throws InterruptedException, ExecutionException;用来获取执行结果，这个方法会产生阻塞会一直等到任务执行完毕才返回\n5.V get(long timeout, TimeUnit unit)\nthrows InterruptedException, ExecutionException, TimeoutException;用来获取执行结果，如果在指定时间内，还没获取到结果，直接返回null\n使用Future的好处：\n1.获取任务的结果，判断任务是否完成，中断任务\n2.Future的get方法很好的替代的了Thread.join或Thread,join(long millis)\n3.Future的get方法可以判断程序代码(任务)的执行是否超时，如：\n1 2 3 4 5 6  try { future.get(60,TimeUtil.SECOND); } catch(TimeoutException timeout){ og4j.log(\u0026#34;异常，将被取消！！\u0026#34;); future.cancel(); }    FutureTask CompletableFuture 提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法,帮助我们简化异步编程的复杂性,有点类似于rxjava的模式，当然没有提供这么丰富的功能    多线程间的通信  内存共享  共享volatile变量 synchronized+notify+wait lock+condition semaphere+flag   管道  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  public class CommunicateWhitPiping { public static void main(String[] args) { PipedOutputStream pos = new PipedOutputStream(); PipedInputStream pis = new PipedInputStream(); try { //将管道输入流与输出流连接 此过程也可通过重载的构造函数来实现  pos.connect(pis); } catch (IOException e) { e.printStackTrace(); } //创建生产者线程  Producer p = new Producer(pos); //创建消费者线程  Consumer c = new Consumer(pis); //启动线程  p.start(); c.start(); } } //生产者线程(与一个管道输入流相关联) class Producer extends Thread { private PipedOutputStream pos; public Producer(PipedOutputStream pos) { this.pos = pos; } public void run() { int i = 8; try { pos.write(i); } catch (IOException e) { e.printStackTrace(); } } } //消费者线程(与一个管道输入流相关联) class Consumer extends Thread { private PipedInputStream pis; public Consumer(PipedInputStream pis) { this.pis = pis; } public void run() { try { System.out.println(pis.read()); } catch (IOException e) { e.printStackTrace(); } } }    公共接口 消息通信 如：Actor模型  BlockingDeque  BlockingDeque LinkedBlockingQueue LinkedBlockingDeque ConcurrentHashMap ConcurrentLinkedQueue DelayQueue SynchronousQueue LinkedTransferQueue  多线程的经典场景-生产者消费者模式实现  阻塞队列实现 synchronized关键字实现 lock实现  参考：\n 深入理解JVM - Java内存模型与线程 - 第十二章 Java CompletableFuture 详解 CountDownLatch理解一：与join的区别  "
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/",
	"title": "插件化",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E6%8F%92%E4%BB%B6%E5%8C%96/",
	"title": "插件化",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E6%8F%92%E4%BB%B6%E5%8C%96/",
	"title": "插件化",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E6%8F%92%E4%BB%B6%E5%8C%96%E5%92%8C%E7%83%AD%E6%9B%B4%E6%96%B0/",
	"title": "插件化和热更新",
	"tags": ["android", "插件化", "热更新"],
	"categories": [],
	"series": ["插件化", "热更新"],
	"description": "Syntax highlighting test",
	"content": "插件化在几年前火的一塌糊涂，由插件化延续到后来的热更新，近几年似乎没了当初的狂热\n插件化和热更新的意义在于动态化升级。不同于web只要后台发布用户前端的下次请求页面和逻辑都会改变，Android的UI及逻辑代码在手机上，发布需要经过各大市场，由审核时间，且就算发布到各大市场用户也不一定更新，强制用户更新的结果可能是被用户强制卸载。但是发布新功能/紧急修复bug的需求是巨大的。于是先有了\n 将web那一套搬到移动端的做法，但是web在移动端的性能让其体验很差，虽然出现了很多框架增强了许多，但还是有差距 原生的插件化和热更新 RectNative 热更新  RectNative用脚本语言js控制逻辑，使用c++桥接的形式控制原生控件显示，由于脚本语言不用编译，可以动态发布从而实现热更新\n由于官方不支持插件化和热更新（理由是安全问题）导致原生插件化和热更新只能另辟蹊径\n热更新分两种，一种是重启生效，一种是即时生效\n即时生效的原理是：这个过程相当复杂不易控制\n这里主要讲喜爱重启生效热更新模式的原理：\nClassLoader,java的ClassLoader双亲委托机制\n干预Android加载，既然要干预那就要首先了解其原加载过程\n"
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
	"title": "源码解析",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/",
	"title": "热更新",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E7%83%AD%E6%9B%B4%E6%96%B0/",
	"title": "热更新",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E7%83%AD%E6%9B%B4%E6%96%B0/",
	"title": "热更新",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E8%87%AA%E5%AE%9A%E4%B9%89view-pullview/",
	"title": "自定义View-PullView",
	"tags": ["android", "自定义view"],
	"categories": [],
	"series": ["自定义view"],
	"description": "自定义高可用，易扩展下拉刷新上拉加载空间",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/about/",
	"title": "关于",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Hugo, dshcao about",
	"content": "  GitHub.\n  掘金.\n  微博.\n  "
},
{
	"uri": "https://dshcao.github.io/zh/tags/css/",
	"title": "css",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/html/",
	"title": "html",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/markdown-syntax/",
	"title": "Markdown Syntax Guide",
	"tags": ["markdown", "css", "html", "themes"],
	"categories": [],
	"series": ["Themes Guide"],
	"description": "Sample article showcasing basic Markdown syntax and formatting for HTML elements.",
	"content": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don't communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren't part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo's internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike's talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  "
},
{
	"uri": "https://dshcao.github.io/zh/categories/syntax/",
	"title": "syntax",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/themes/",
	"title": "themes",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/themes/",
	"title": "themes",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/themes-guide/",
	"title": "Themes Guide",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/privacy/",
	"title": "privacy",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/rich-content/",
	"title": "Rich Content",
	"tags": ["shortcodes", "privacy"],
	"categories": [],
	"series": [],
	"description": "A brief description of Hugo Shortcodes",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/shortcodes/",
	"title": "shortcodes",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/math-typesetting/",
	"title": "Math Typesetting",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "A brief guide to setup KaTeX",
	"content": "Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project's configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n"
},
{
	"uri": "https://dshcao.github.io/zh/tags/amoji/",
	"title": "amoji",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/bamoji/",
	"title": "bamoji",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/emoji/",
	"title": "emoji",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/emoji-support/",
	"title": "Emoji Support",
	"tags": ["emoji", "gamoji", "namoji", "bamoji", "amoji"],
	"categories": [],
	"series": [],
	"description": "Guide to emoji usage in Hugo",
	"content": "Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  "
},
{
	"uri": "https://dshcao.github.io/zh/tags/gamoji/",
	"title": "gamoji",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/namoji/",
	"title": "namoji",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/diagram/",
	"title": "diagram",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-viz/",
	"title": "Viz support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "A hack to put Graphviz on the web.",
	"content": "digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026quot;process #1\u0026quot;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026quot;process #2\u0026quot;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } "
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-wavedrom/",
	"title": "Wavedrom support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.",
	"content": "{ \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ]} "
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-chartjs/",
	"title": "Chart support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "Simple yet flexible JavaScript charting for designers &amp; developers",
	"content": "{ \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } { \u0026quot;type\u0026quot;: \u0026quot;line\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 2, 3], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;orange\u0026quot; }, { \u0026quot;label\u0026quot;: \u0026quot;Some other set\u0026quot;, \u0026quot;data\u0026quot;: [15, 8, 13, 5, 5, 9], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;#44ccff\u0026quot; } ] } } "
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-js-sequence-diagrams/",
	"title": "JS Sequence Diagram support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "Generates UML sequence diagrams from simple text",
	"content": "Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow "
},
{
	"uri": "https://dshcao.github.io/zh/tags/diagram/",
	"title": "diagram",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-mermaid/",
	"title": "Mermaid support",
	"tags": ["diagram"],
	"categories": [],
	"series": [""],
	"description": "Generate diagrams, charts, graphs or flows from markdown-like text via javascript.",
	"content": "graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 "
},
{
	"uri": "https://dshcao.github.io/zh/categories/math/",
	"title": "math",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-mathjax/",
	"title": "MathJax support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.",
	"content": "When \\(a \\ne 0\\), there are two solutions to \\((ax^2 + bx + c = 0)\\) and they are\n\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\]\n"
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-katext/",
	"title": "Katex support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.",
	"content": "The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$ Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n"
},
{
	"uri": "https://dshcao.github.io/zh/posts/test-flowchart/",
	"title": "Flowchart support",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.",
	"content": "st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e "
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-scroller/",
	"title": "Android Scroller解析及应用",
	"tags": ["android", "scroller", "源码解析"],
	"categories": [],
	"series": [],
	"description": "Scroller 源码解析",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-flutter/",
	"title": "Android-Flutter",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-vrar/",
	"title": "Android-VR&amp;AR",
	"tags": ["vr", "ar"],
	"categories": [],
	"series": [""],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E7%9B%B4%E6%92%AD-%E5%BD%95%E5%88%B6%E5%B1%8F%E5%B9%95/",
	"title": "Android直播-录制屏幕",
	"tags": ["android", "直播", "音视频"],
	"categories": [],
	"series": ["直播"],
	"description": "Syntax highlighting test",
	"content": "录屏的根本是怎么获取屏幕的显示数据\n屏幕录制的几种实现方式：  Linux+framebuffer+root权限 利用View.getDrawingCache() Android shell命令screencap/screenrecord+root权限 SurfaceFlinger+framebuffer VirtualDisplay+MediaProjection  一、Linux+framebuffer+root权限 Android 基于 Linux，所以可以通过读取 /dev/graphics/fb0 设备节点，即 framebuffer 中的帧数据来实现屏幕的录制。但是读取这个设备节点需要 root 权限\n二、View.getDrawingCache() 通过 View 的 cache 内容获取到 Bitmap 对象来达到录屏的效果。但是很多手机上面该方式会存在性能问题，另外该方式并不是一个真正意义上的录屏方式，另外部分 View 组件的内容并不能获取到，比如webview\n三、Android shell命令screencap/screenrecord+root权限 screencap/screenrecord 是 Android shell 的命令，需要root 权限\n creencap -p xxx.png/screenshot xxx.png adb shell screenrecord \u0026ndash;size 1280*720 \u0026ndash;bit-rate 6000000 \u0026ndash;time-limit 30 /sdcard/demo.mp4\n\u0026ndash;size 指定视频分辨率；\n\u0026ndash;bit-rate 指定视频比特率，默认为4M，该值越小，保存的视频文件越小；\n\u0026ndash;time-limit 指定录制时长，若设定大于180，命令不会被执行；  四、SurfaceFlinger + framebuffer 见参考 从surfaceflinger历史变更谈截屏\n五、VirtualDisplay + MediaProjection 在我的华为荣耀8 android8.0 手机上下载虎牙直播测试发现他们使用的是该方案\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  class ScreenCaptureActivity : AbsActivity() { lateinit var surface: Surface private lateinit var surfaceView: SurfaceView lateinit var projectionManager: MediaProjectionManager private var display: VirtualDisplay? = null private var projection: MediaProjection? = null // private var _resultCode: Int? = null  private var _resultData: Intent? = null private lateinit var capture: TextView companion object { const val REQUEST_PROJECTION = 2 const val STATE_RESULT_CODE = \u0026#34;result_code\u0026#34; const val STATE_RESULT_DATA = \u0026#34;result_data\u0026#34; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_screen_capture) // _resultCode = savedInstanceState?.getInt(STATE_RESULT_CODE)  _resultData = savedInstanceState?.getParcelable(STATE_RESULT_DATA) surfaceView = findViewById(R.id.surface) surface = surfaceView.holder.surface projectionManager = getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager capture = findViewById(R.id.capture) capture.setOnClickListener { if (display == null) { startCapture() capture.text = \u0026#34;停止\u0026#34; } else { stopCapture() capture.text = \u0026#34;开始\u0026#34; } } } override fun onSaveInstanceState(outState: Bundle) { super.onSaveInstanceState(outState) // if (_resultCode != null) { // outState.putInt(STATE_RESULT_CODE, _resultCode!!) // }  if (_resultData != null) { outState.putParcelable(STATE_RESULT_DATA, _resultData) } } override fun onPause() { super.onPause() stopCapture() } override fun onDestroy() { super.onDestroy() projection?.stop() projection = null } private fun startCapture() { if (/*_resultCode == null \u0026amp;\u0026amp;*/ _resultData == null) { startActivityForResult( projectionManager.createScreenCaptureIntent(), REQUEST_PROJECTION ) } else { setup() } } private fun stopCapture() { display?.release() display = null } private fun setup() { if (projection == null) { projection = projectionManager.getMediaProjection( /*_resultCode!!*/Activity.RESULT_OK, _resultData!! ) } if (projection != null) { display = projection!!.createVirtualDisplay( \u0026#34;ScreenCapture\u0026#34;, surfaceView.width, surfaceView.height, Getter.metrics().densityDpi, DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR, surface, null, null ) } } override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) { super.onActivityResult(requestCode, resultCode, data) when (requestCode) { REQUEST_PROJECTION -\u0026gt; { if (resultCode != Activity.RESULT_OK) { Toast.makeText(this, \u0026#34;User denied screen sharing permission\u0026#34;, Toast.LENGTH_LONG) .show() return } // _resultCode = resultCode  _resultData = data setup() } } } }   单纯在当前activity或app中实现录屏使用场景有限，实际使用中需要配合Service实现app退到后台继续录屏\n参考：\n 手机游戏直播中的录屏怎么实现 从surfaceflinger历史变更谈截屏  "
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E7%9B%B4%E6%92%AD-%E9%87%87%E5%BD%95%E6%91%84%E5%83%8F%E5%A4%B4/",
	"title": "Android直播-采录摄像头",
	"tags": ["android", "直播", "音视频"],
	"categories": [],
	"series": ["直播"],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/ar/",
	"title": "ar",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/camera/",
	"title": "camera",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/ffmpeg/",
	"title": "FFmpeg",
	"tags": ["ffmpeg", "音视频", "android"],
	"categories": [],
	"series": [""],
	"description": "Syntax highlighting test",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/ffmpeg/",
	"title": "ffmpeg",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/hugo/",
	"title": "hugo",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/hugo/",
	"title": "hugo",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/jetpack-camerax/",
	"title": "Jetpack-CameraX",
	"tags": ["android", "jetpack", "camera", "media"],
	"categories": [],
	"series": ["jetpack"],
	"description": "Jetpack-CameraX",
	"content": "一、camera2 CameraX是Jetpack对camera2功能的封装，并可向后兼容至 Android 5.0（API 级别 21）\n"
},
{
	"uri": "https://dshcao.github.io/zh/tags/media/",
	"title": "media",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/scroller/",
	"title": "scroller",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/",
	"title": "Syntax highlighting",
	"tags": ["hugo"],
	"categories": [],
	"series": [""],
	"description": "Syntax highlighting test",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\n This is a blockqute.\n line\nline\nCode Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   "
},
{
	"uri": "https://dshcao.github.io/zh/tags/vr/",
	"title": "vr",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB/",
	"title": "属性动画",
	"tags": ["hugo"],
	"categories": [],
	"series": [""],
	"description": "Syntax highlighting test",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\n This is a blockqute.\n line\nline\nHandler详解 Verify the following code blocks render as code blocks and highlight properly.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   "
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
	"title": "源码解析",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E7%9B%B4%E6%92%AD/",
	"title": "直播",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/%E7%9B%B4%E6%92%AD/",
	"title": "直播",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E7%9B%B4%E6%92%AD/",
	"title": "直播",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/%E7%BB%84%E4%BB%B6%E5%8C%96/",
	"title": "组件化",
	"tags": ["hugo"],
	"categories": [],
	"series": [""],
	"description": "Syntax highlighting test",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\n This is a blockqute.\n line\nline\nHandler详解 Verify the following code blocks render as code blocks and highlight properly.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   "
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E9%9A%8F%E7%AC%94/",
	"title": "随笔",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E9%9A%8F%E7%AC%94/",
	"title": "随笔",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/notes/",
	"title": "随笔",
	"tags": ["index"],
	"categories": [],
	"series": [],
	"description": "Note page",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/notes/android/%E9%9A%8F%E8%AE%B0/",
	"title": "随记",
	"tags": ["随笔"],
	"categories": [],
	"series": [""],
	"description": "小知识点",
	"content": "一、Manifest配置 allowBackup fullBackupContent https://developer.android.com/guide/topics/data/autobackup\nallowBackup配置用来开启停用自动备份\nfullBackupContent用来配置配分规则，如：android:fullBackupContent=\u0026rdquo;@xml/backup_rules\u0026rdquo;\n1 2 3 4 5 6 7 8 9  \u0026lt;!--backup_rules --\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;full-backup-content\u0026gt; \u0026lt;include domain=[\u0026#34;file\u0026#34; | \u0026#34;database\u0026#34; | \u0026#34;sharedpref\u0026#34; |\u0026#34;external\u0026#34; | \u0026#34;root\u0026#34;] path=\u0026#34;string\u0026#34; requiredFlags=[\u0026#34;clientSideEncryption\u0026#34; | \u0026#34;deviceToDeviceTransfer\u0026#34;] /\u0026gt; \u0026lt;exclude domain=[\u0026#34;file\u0026#34; | \u0026#34;database\u0026#34; | \u0026#34;sharedpref\u0026#34; |\u0026#34;external\u0026#34; | \u0026#34;root\u0026#34;] path=\u0026#34;string\u0026#34; /\u0026gt; \u0026lt;/full-backup-content\u0026gt;   另外还可实现BackupAgent应用于你的备份逻辑\n如何保证序列化和反序列化仍然是同一个对象？比如单例模式从而实现线程安全\nprotected Object readResolve() throws ObjectStreamException {\nreturn mInstance;\n}\n原因，看ObjectInputStream注释文档\ncustomized: any class-specific readObject, readObjectNoData, and readResolve methods defined by enum types are ignored during deserialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L. ObjectInputStream反序列化源码检测是否定义了readResolve()方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  if (obj != null \u0026amp;\u0026amp; handles.lookupException(passHandle) == null \u0026amp;\u0026amp; desc.hasReadResolveMethod()){ Object rep = desc.invokeReadResolve(obj); if (unshared \u0026amp;\u0026amp; rep.getClass().isArray()) { rep = cloneArray(rep); } if (rep != obj) { // Android-removed: ObjectInputFilter logic, to be reconsidered. http://b/110252929  /* // Filter the replacement object if (rep != null) { if (rep.getClass().isArray()) { filterCheck(rep.getClass(), Array.getLength(rep)); } else { filterCheck(rep.getClass(), -1); } } */ handles.setObject(passHandle, obj = rep); } }   "
},
{
	"uri": "https://dshcao.github.io/zh/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/",
	"title": "音视频",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/",
	"title": "音视频",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/posts/placeholder-text/",
	"title": "Placeholder Text",
	"tags": ["markdown", "text"],
	"categories": [],
	"series": [],
	"description": "Lorem Ipsum Dolor Si Amet",
	"content": "Lorem est tota propiore conpellat pectoribus de\npectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus inhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n"
},
{
	"uri": "https://dshcao.github.io/zh/tags/text/",
	"title": "text",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/blogging/",
	"title": "Blogging",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/categories/ctest/",
	"title": "cTest",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/development/",
	"title": "Development",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/fast/",
	"title": "fast",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/tags/go/",
	"title": "Go",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/series/go-web-dev/",
	"title": "Go Web Dev",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/note-1/",
	"title": "Note-1",
	"tags": ["Development", "Go", "fast", "Blogging"],
	"categories": [],
	"series": ["Go Web Dev"],
	"description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
	"content": "post-1 content\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget enim lobortis, bibendum massa et, bibendum enim. Nunc eu augue quis ante porta sodales. Mauris vel faucibus magna, dictum sagittis dolor. Nam scelerisque malesuada efficitur. Donec consequat sodales justo, ut aliquam ligula maximus nec. Quisque metus tellus, tincidunt eu consequat consequat, placerat sed ante. Cras pulvinar eros ex, vel luctus eros viverra sed. Donec nec quam aliquam, ultricies neque sed, sollicitudin lorem. Aenean faucibus, velit et facilisis semper, leo tellus pellentesque orci, non suscipit libero ipsum sed lacus. Fusce pharetra arcu sed tellus convallis, vel hendrerit turpis rhoncus.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/note-2/",
	"title": "Note-2",
	"tags": ["Go", "fast", "Blogging"],
	"categories": [],
	"series": ["Go Web Dev"],
	"description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget enim lobortis,",
	"content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget enim lobortis, bibendum massa et, bibendum enim. Nunc eu augue quis ante porta sodales. Mauris vel faucibus magna, dictum sagittis dolor. Nam scelerisque malesuada efficitur. Donec consequat sodales justo, ut aliquam ligula maximus nec.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/note-3/",
	"title": "Note-3",
	"tags": ["Development", "Go", "fast"],
	"categories": [],
	"series": ["Go Web Dev"],
	"description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget enim lobortis,",
	"content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget enim lobortis, bibendum massa et, bibendum enim. Nunc eu augue quis ante porta sodales. Mauris vel faucibus magna, dictum sagittis dolor. Nam scelerisque malesuada efficitur. Donec consequat sodales justo, ut aliquam ligula maximus nec.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/go/go-1/go-1-1/go-1/",
	"title": "Go 1",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "Go 1 Description",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\nVeniam deserunt ex ullamco laboris et elit culpa enim. Irure ipsum dolore sint nisi aliquip labore fugiat magna esse ad nostrud in. Eu aliqua mollit tempor proident pariatur voluptate.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/go/go-1/go-2/",
	"title": "Go 2",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "Go 2 Description",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\nVeniam deserunt ex ullamco laboris et elit culpa enim. Irure ipsum dolore sint nisi aliquip labore fugiat magna esse ad nostrud in. Eu aliqua mollit tempor proident pariatur voluptate.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/go/go-4/",
	"title": "Go 4",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "Go 4 Description",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\nVeniam deserunt ex ullamco laboris et elit culpa enim. Irure ipsum dolore sint nisi aliquip labore fugiat magna esse ad nostrud in. Eu aliqua mollit tempor proident pariatur voluptate.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/go/go-1/go-1-1/go-1-1-1/go-5/",
	"title": "Go 5",
	"tags": [""],
	"categories": [],
	"series": [""],
	"description": "Go 5 Description",
	"content": "Dolore in consectetur irure qui laborum. Adipisicing cillum ad laboris dolor. Quis consectetur ullamco esse ad mollit anim sint nostrud esse. Irure voluptate ex fugiat voluptate ea fugiat laboris.\nVeniam deserunt ex ullamco laboris et elit culpa enim. Irure ipsum dolore sint nisi aliquip labore fugiat magna esse ad nostrud in. Eu aliqua mollit tempor proident pariatur voluptate.\n"
},
{
	"uri": "https://dshcao.github.io/zh/notes/java/",
	"title": "Java",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Note Sub List",
	"content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget enim lobortis, bibendum massa et, bibendum enim. Nunc eu augue quis ante porta sodales. Mauris vel faucibus magna, dictum sagittis dolor. Nam scelerisque malesuada efficitur. Donec consequat sodales justo, ut aliquam ligula maximus nec.\n"
}]